package secretive.department.mutation;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import secretive.concept.ApiEntity;
import secretive.concept.EntityReferenceFactory.EntityReference;
import secretive.department.DepartmentDto;
import secretive.department.ExcludedDepartmentDto;
import secretive.department.presentation.DepartmentCreationRequest;
import secretive.project.mutation.Project;
import secretive.team.mutation.Team;

import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;

@Entity
public class Department implements ApiEntity {

    /**
     * should <b>NOT</b> be set manually, it will be generated by the persistence provider.
     */
    @Id
    @NotNull
    UUID id;

    @NotNull
    String name;

    @ManyToMany
    @JoinTable(name = "department_department_exclusion",
            joinColumns = {@JoinColumn(name = "department_id")},
            inverseJoinColumns = {@JoinColumn(name = "excluded_department_id")})
    Set<Department> excludedDepartments;

    @ManyToMany
    @JoinTable(name = "department_project_exclusion",
            joinColumns = {@JoinColumn(name = "department_id")},
            inverseJoinColumns = {@JoinColumn(name = "excluded_project_id")})
    Set<Project> excludedProjects;

    @ManyToMany
    @JoinTable(name = "department_team_exclusion",
            joinColumns = {@JoinColumn(name = "department_id")},
            inverseJoinColumns = {@JoinColumn(name = "excluded_team_id")})
    Set<Team> excludedTeams;

    @NotNull
    OffsetDateTime createdAt;

    @NotNull
    OffsetDateTime updatedAt;

    Department() {
    }

    Department(DepartmentCreationRequest creationRequest,
               Set<EntityReference<Department>> excludedDepartments,
               Set<EntityReference<Project>> excludedProjects,
               Set<EntityReference<Team>> excludedTeams
               ) {
        id = UUID.randomUUID();
        name = creationRequest.name();
        this.excludedDepartments = excludedDepartments.stream().map(EntityReference::value).collect(Collectors.toSet());
        this.excludedProjects = excludedProjects.stream().map(EntityReference::value).collect(Collectors.toSet());;
        this.excludedTeams = excludedTeams.stream().map(EntityReference::value).collect(Collectors.toSet());;

        var now = OffsetDateTime.now().withOffsetSameInstant(ZoneOffset.UTC);
        createdAt = now;
        updatedAt = now;
    }

    public DepartmentDto toDto() {
        return new DepartmentDto(id, name,
                excludedDepartments.stream().map(Department::toExcludedDepartmentDto).collect(Collectors.toSet()),
                excludedProjects.stream().map(Project::excludedProjectDto).collect(Collectors.toSet()),
                excludedTeams.stream().map(Team::toExcludedTeamDto).collect(Collectors.toSet()));
    }

    public ExcludedDepartmentDto toExcludedDepartmentDto() {
        return new ExcludedDepartmentDto(id, name);
    }

}
